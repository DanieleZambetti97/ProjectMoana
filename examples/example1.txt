Istruzioni per fare questa immagine:

- Script paralle_exe.sh, parametro a_normalization per la conversione in LDR della somma = 2

- Utilizzare come eseguibile demo_pathtracer.jl

- Parametri della scena e dell'osservatore
    w = 1280
    h = 960
    d = 1
    camera_tr = rotation_z(params["angle"]*Ï€/180.0) * translation(Vec(-2.0,0.,0.))
    algorithm = P
    samples_per_pixel = 4

    sky_color = Material(DiffuseBRDF(UniformPigment(RGB(.1,.5,.99))), UniformPigment(BLACK))
    sky = Plane(translation(Vec(0.,0.,500.)) * rotation_y( pi/3.), sky_color)
    add_shape(world, sky)

    sun_color = Material(DiffuseBRDF(UniformPigment(RGB(0.6,0.8,1.))), UniformPigment(WHITE))
    sun = Plane(translation(Vec(-100,0.,0.)) * rotation_y(pi/2.), sun_color )
    add_shape(world, sun)

    ground_color = Material(DiffuseBRDF(CheckeredPigment(RGB(0.3, 0.5, 0.1), RGB(1, 0.6, 0.8), 4)))
    ground = Plane(translation(Vec(0.,0.,-1.5)) * rotation_y(pi/12.) * rotation_x(pi/24.) * scaling(Vec(5,5,5)), ground_color )
    add_shape(world, ground)

    mirror_color = Material(SpecularBRDF())
    mirror = Sphere(translation(Vec(1.5,2,-0.5))*scaling(Vec(1.,1.5,1.)), mirror_color)
    add_shape(world, mirror)

    planet2_color = Material(DiffuseBRDF(ImagePigment(read_pfm_image("./examples/jupiter_texture.pfm"))))
    planet2 = Sphere(translation(Vec(6.,-4.,3.)) * scaling(Vec(3.,3.,3.)), planet2_color)
    add_shape(world, planet2)

    planet_color = Material(DiffuseBRDF(ImagePigment(read_pfm_image("./examples/mars_texture.pfm"))))
    planet = Sphere(translation(Vec(1.,-1.,-1.1)) * scaling(Vec(1.,1.,1.)), planet_color)
    add_shape(world, planet)
